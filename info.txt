1. Setting Up Rasa Project:

Create a virtual environment: Isolate your project's dependencies from your system's Python environment using venv or conda.
Install Rasa: Use pip install rasa in your activated virtual environment.
Initialize the project: Run rasa init to create the basic project structure.

2. Defining Intents and Entities:
Intents: Define user intents like get_stock_price, predict_stock_price, stock_news, etc. These represent user goals.
Entities: Define entities relevant to your intents, like stock_symbol within get_stock_price intent.

3. Training Data Collection:
Gather training data: Collect examples of user queries and their corresponding intents and entities. You can:
Use existing datasets from https://github.com/RasaHQ/NLU-training-data
Scrape financial data websites with tools like Beautiful Soup.
Manually create examples.
Format as Rasa training data: Each example should have text, intent, and entities (if applicable). Refer to Rasa documentation for formatting details.

4. NLU Model Training:
Split data: Divide your data into training and testing sets.
Train the NLU model: Run rasa train nlu with your training data file.
Evaluate model performance: Use rasa test nlu to assess accuracy and identify areas for improvement.

5. Integrating External Data Sources:
APIs: Integrate with financial APIs (e.g., IEX Cloud, Alpha Vantage) to retrieve real-time stock data.
Excel Sheets: Use Python libraries like pandas to read and process data from Excel sheets.
6. Creating Response Actions:

Path 1 (Factual Response):
Use rasa shell to interact with your trained model.
Based on the intent (e.g., get_stock_price), fetch data from the relevant API or Excel sheet.
Structure the response with the retrieved information.

Path 2 (Predictive Response):
Train a separate machine learning model on the gathered financial data, using libraries like scikit-learn or TensorFlow.
Within your response action, use the trained model to make predictions based on user queries and retrieved data.
Disclaimer: Implementing a reliable and accurate prediction system requires substantial data and expertise. It's crucial to emphasize the experimental nature of these predictions.

7. Custom Components (Optional):
Dialogue Management: Consider using Rasa Core for advanced conversation management if needed.

8. Deployment:
Choose a platform: Options include Rasa Open Source, Rasa X, or cloud platforms like AWS, GCP, or Azure.
Follow deployment instructions: Each platform provides specific instructions for deploying your Rasa model.
Additional Tips:
Start simple: Begin with factual responses before venturing into predictions.
Iteratively improve: Continuously gather new training data and refine your model.
Be transparent: Clearly explain the limitations of your bot and emphasize that predictions are not financial advice.
Explore Rasa resources: Refer to the official Rasa documentation, tutorials, and community forums for further guidance: https://rasa.com/docs/.

Git Prompts:
    add 
    fix 
    error 
    update 
    test

General:
    confidence score - the closer to 1, the better

Test: 
    integrate nlp ?
    try other models to make predicitions
    advanced nlu
    instead of dumping into json file only after predicitions, can i dump as soon as i get a company name. and then dump later accordingly
    only spacy, duckling, dietClassifier ?

Incorporate:
    use slot instead of dumping, always get stock_name from slot
    mappings in predicitions !!
    stock tickers from api ?
    list down all the things you can tell me ?
    contact us, to report inconsistencies
    login functionalities
    by Raghav Patodiya and link to github

Functionalities: 
    once price predicted - buysellhold, trend, volatality
    other - gainers, losers, specifc info, general info, market sentiment, market status, latest price, older price
    answer stock related questions

Error:
    stock_info not displayed on bot interface
    
Tool:
    add to git
    calculate LOC
    from selected files
    tells users

Commands: 
    rasa run
    rasa run actions
    python -u "e:\Study2024\rasaFinancial\app.py"  
    python -u "e:\Study2024\rasaFinancial\loc_calculator.py" 
    docker run -p 8000:8000 rasa/duckling 